{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{/* Generate a struct for each field. */}}
	{{ $name := $model.Name.GoCase }}
	{{ $modelName := (print $model.Name.GoCase "Model") }}
	{{ $ns := (print $name "Actions") }}
	{{ $nsFindOne := (print $name "FindOne") }}
	{{ $nsParams := (print $name "Params") }}

	type {{ $ns }} struct {
		// client holds the photon client
		client *Client
	}

	func (r {{ $ns }}) FindOne(params ...{{ $nsParams }}) {{ $nsFindOne }} {
		var v {{ $nsFindOne }}
		v.query.client = r.client
		var fields []field
		for _, q := range params {
			fields = append(fields, q.data)
		}
		v.query.inputs = append(v.query.inputs, input{
			name:   "where",
			fields: fields,
		})
		return v
	}

	type {{ $nsFindOne }} struct {
		query query
	}

	var {{ $model.Name.GoLowerCase }}Outputs = []field{
		{{- range $i := $model.Fields }}
			{{- if $i.Kind.IncludeInStruct }}
				{name: "{{ $i.Name.CamelCase }}"},
			{{- end }}
		{{- end }}
	}

	func (r {{ $nsFindOne }}) Exec(ctx context.Context) ({{ $modelName }}, error) {
		r.query.operation = "query"
		r.query.method = "findOne"
		r.query.model = "{{ $name }}"
		r.query.outputs = {{ $model.Name.GoLowerCase }}Outputs
		var v FindOne{{ $name }}Response
		err := r.query.exec(ctx, &v)
		return {{ $modelName }}{v.Data.FindOne{{ $name }}}, err
	}

	type {{ $nsParams }} struct {
		data field
	}
{{ end }}
